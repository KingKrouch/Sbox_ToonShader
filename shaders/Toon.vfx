//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Toon Shader";
	DevShader = true;
	Version = 1;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
	VrForward();													// Indicates this shader will be used for main rendering
	Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
	ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
	ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"

	Feature(F_FRESNEL_EDGE_LIGHTING, 0..1, "Toon Shading");
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"

	struct ToonShadedMaterial
	{
  		// Color and Normal Maps
		float4	g_vToonOutlineColor < UiType(Texture); Default4(0.0, 0.0, 0.0, 0.0); UiGroup("Toon_Shading,10/2"); >; TextureAttribute(g_vToonOutlineColor, g_vToonOutlineColor); 							// RGB is used for outline color, A is used for whether or not the ToonColor (After shading is applied) or the ToonOutline color will appear.		           											// The normal map will be used for influencing the shading and specularity
		// Shading Parameters
  		float	g_vToonShadingRoughness < UiType(Texture); Default(0.0); UiGroup("Toon_Shading,10/4"); >; TextureAttribute(g_vToonShadingRoughness, g_vToonShadingRoughness);      							// 0.0f is fully rough shading, 1.0f is soft shading
		int		g_vToonShadingSteps < UiType(Slider); Default(1); Range(1, 4); UiGroup("Toon_Shading,10/5"); >; IntAttribute(g_vToonShadingSteps, g_vToonShadingSteps);          							// 1 is the default amount of steps (lit or shaded), but this can go up to four steps.
  		float	g_vToonShadingOffset < UiType(Texture); Default(0.5); UiGroup("Toon_Shading,10/6"); >; TextureAttribute(g_vToonShadingOffset, g_vToonShadingOffset); 	       								// Controls how much of the material is shaded. 0.5 is the default, being half the material.
		float	g_vEdgeShading < UiType(Texture); Default(0.0); UiGroup("Toon_Shading,10/7"); >; TextureAttribute(g_vEdgeShading, g_vEdgeShading);	       													// Allows certain portions of the material to be shaded on the edges based on the camera direction. By default, this is set to 0.
		float	g_vEdgeShadingOffset < UiType(Texture); Default(0.125); UiGroup("Toon_Shading,10/8"); >; TextureAttribute(g_vEdgeShadingOffset, g_vEdgeShadingOffset);	       								// Controls how much of the material has edge shading. By default, this is set to 0.125, being 1/8th of the material radius.
		float3	g_vShadingColor < UiType(Texture); Default3(0.5, 0.5, 0.5); UiGroup("Toon_Shading,10/9"); >; TextureAttribute(g_vShadingColor, g_vShadingColor);		       								// Controls the shading color (ToonColor * Shading Color).
		float	g_vDynamicShadowRoughness < UiType(Slider); Default(1.0); Range(0.0, 1.0); UiGroup("Toon_Shading,10/10"); >; FloatAttribute(g_vDynamicShadowRoughness, g_vDynamicShadowRoughness);   		// Controls how rough dynamic shadows are on the material. By default, this is set to 1.0 to preserve the original look of dynamic shadows.
		// Specular Parameters
		float	g_vSpecular < UiType(Texture); Default(1.0); UiGroup("Toon_Shading,10/11"); >; TextureAttribute(g_vSpecular, g_vSpecular);																	// Controls the specularity of the material.
		float3	g_vSpecularColor < UiType(Texture); Default3(1.0, 1.0, 1.0); UiGroup("Toon_Shading,10/12"); >; TextureAttribute(g_vSpecularColor, g_vSpecularColor);
		float	g_vSpecularIntensity < UiType(Texture); Default(0.25); UiGroup("Toon_Shading,10/13"); >; TextureAttribute(g_vSpecularIntensity, g_vSpecularIntensity);
		float	g_vSpecularRoughness < UiType(Texture); Default(0.0); UiGroup("Toon_Shading,10/14"); >; TextureAttribute(g_vSpecularRoughness, g_vSpecularRoughness);										// Controls the roughness of the specularity. 0.0f is fully rough specularity, 1.0f is soft specularity.
		float	g_vSpecularOffset < UiType(Texture); Default(1.0); UiGroup("Toon_Shading,10/15"); >; TextureAttribute(g_vSpecularOffset, g_vSpecularOffset);
		int		g_vSpecularSteps < UiType(Slider); Default(1); Range(1, 3); UiGroup("Toon_Shading,10/16"); >; IntAttribute(g_vSpecularSteps, g_vSpecularSteps);	   											// 1 is the default amount of steps (highlighted or lit), but this can go up to three steps.
		// Fresnel Parameters
		float	g_vFresnelIntensity < UiType(Texture); Default(1.0); UiGroup("Toon_Shading,10/17"); >; TextureAttribute(g_vFresnelIntensity, g_vFresnelIntensity);	   										// Controls how much fresnel the material has.
		float3  g_vFresnelColor < UiType(Texture); Default3(1.0, 1.0, 1.0); UiGroup("Toon_Shading,10/18"); >; TextureAttribute(g_vFresnelColor, g_vFresnelColor);											// Controls the fresnel color.
		//bool 	g_vFresnelEdgeLighting < UiType(CheckBox); Default(false); UiGroup("Toon_Shading,10/19"); >; BoolAtttribute(g_vFresnelEdgeLighting, g_vFresnelEdgeLighting);			   					// Toggles whether Fresnel Rim Lighting is enabled or not. Disabled by default.
		float 	g_vFresnelRoughness < UiType(Texture); Default(1.0); UiGroup("Toon_Shading,10/20"); >; TextureAttribute(g_vFresnelRoughness, g_vFresnelRoughness);		   									// 0.0f is fully rough fresnel, 1.0f is soft fresnel.
		float 	g_vFresnelOffset < UiType(Texture); Default(0.0); UiGroup("Toon_Shading,10/21"); >; TextureAttribute(g_vFresnelOffset, g_vFresnelOffset);
	};
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here
		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
	#include "common/pixel.hlsl"
	#include "common.fxc"
	#include "sun_shadowing.fxc"

	float3 lightVector(PixelInput pInput)
	{
		float3 toonLV = dot(g_vSunLightDir, pInput.vNormalWs);
		return toonLV;
	}

	float3 shadingVector(PixelInput pInput)
	{
		float3 toonShade = saturate(lightVector(pInput));
		return toonShade;
	}

	//float3 specularVector(PixelInput pInput, float offset)
	//{
		//float toonSpecOffset = exp2((offset * 10) + 1);
		//float3 toonSpec = pow(saturate(dot(normalize(saturate(lightVector(pInput)) + g_vCameraDirWs), pInput.vNormalWs)), toonSpecOffset);
		//return toonSpec;
	//}

	float3 fresnelVector(PixelInput pInput)
	{
		float fresnelSize = 2; // 2 is the least that I'd suggest, 1 just causes the entire rendering to break. 10 is probably the most that you are going to see it.
		float fresnelSpecular = saturate(pow((dot(g_vCameraDirWs, pInput.vNormalWs) * fresnelSize), 2));
		float fresnelSpec = lerp(1.0, 0.0, fresnelSpecular); // Ceil this if you want hard fresnel shading.
		return fresnelSpec;
	}

	PixelOutput MainPs( PixelInput i )
	{
		PixelOutput o; // Creates a basic Pixel Output.
		Material m = GatherMaterial(i);

		ToonShadedMaterial ToonMat; // We need to initialize our ToonShadedMaterial Struct, so we can reference it.

		// Set up some parameters that we are going to be using, since the struct variable declaration seemingly isn't fucking working right for some reason.
		ToonMat.g_vShadingColor = float3(0.5, 0.5, 0.5);
		ToonMat.g_vSpecularColor = float3(1.0, 1.0, 1.0);
		ToonMat.g_vSpecularIntensity = 0.5;
		ToonMat.g_vSpecularOffset = 1.0;
		ToonMat.g_vToonShadingSteps = 1.0;

		ToonMat.g_vToonShadingRoughness = 0.25;
		ToonMat.g_vToonShadingOffset = 0.00;

		ToonMat.g_vFresnelRoughness = 0.75;
		ToonMat.g_vFresnelOffset = 0.25;

		float3 toonShade = smoothstep(ToonMat.g_vToonShadingOffset,ToonMat.g_vToonShadingRoughness,(shadingVector(i) / ToonMat.g_vToonShadingSteps));
		float3 toonSpecular = smoothstep(ToonMat.g_vFresnelOffset, ToonMat.g_vFresnelRoughness, fresnelVector(i));

		float3 shadingResult = g_vSunLightColor * lerp(m.Albedo * ToonMat.g_vShadingColor, m.Albedo, toonShade); // Do our color and shading results first.
		float3 specularResult = lerp(0.00, ((toonSpecular * ToonMat.g_vSpecularColor) * ToonMat.g_vSpecularIntensity), toonShade); // Then do the specularity calculation next, making sure to keep the shading in mind.
		float3 finalResult = shadingResult + specularResult; // Add these two results together for our final result.

		o.vColor.rgb = finalResult;
		o.vColor.a = m.Opacity; // Makes the output alpha the opacity map attached to the material.
		
		return o;
	}
}